name: "🚀 Vayvy's Ultimate RDP Playground 🌟"

on:
  workflow_dispatch:
    inputs:
      rdp_username:
        description: "🔥 Desired RDP Username (e.g., Yanzz)"
        required: true
        default: "Vayvy"
      discord_webhook_link:
        description: "🔧 Send Webhook Discord Link"
        required: true
        default: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"
      rdp_install_mumu:
        description: "🎮 Install MuMu Player 5 (True/False)"
        required: true
        default: "True"

env:
  DISCORD_WEBHOOK: ${{ github.event.inputs.discord_webhook_link }}
  KEEP_ALIVE_MINUTES: 3600 # 60 hours
  RDP_USERNAME: ${{ github.event.inputs.rdp_username }}
  RDP_INSTALL_MUMU: ${{ github.event.inputs.rdp_install_mumu }}
  RDP_WM_TEXT: "VayVy RDP - Made with 💖"
  EMULATOR_BOOT_WAIT_SECONDS: 90
  EMULATOR_POLL_RETRIES: 6
  DOWNLOAD_TRIES: 4
  MIN_VALID_BYTES: 2000000

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: 🌟🚀 RDP Boot-up Sequence Initiated 🚀🌟
        run: |
          Write-Host "🚀 Workflow started by: ${{ github.actor }}"
          Write-Host "⏰ Current UTC Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
          Write-Host "🖥️ Runner OS: ${{ runner.os }}"
          Write-Host "⏳ Max RDP Uptime: ${{ env.KEEP_ALIVE_MINUTES }} minutes"
          Write-Host ""

      - name: ⚙️ Configure Core RDP Settings
        run: |
          Write-Host "➡️ Step: Configuring Remote Desktop Services..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          Restart-Service -Name TermService -Force
          Write-Host "✅ RDP Core Settings Configured Successfully."

      - name: 🔒 Create RDP User with Secure Password
        run: |
          Write-Host "➡️ Step: Creating Secure RDP User Account..."
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 1
          $rawPassword += $charSet.Lower | Get-Random -Count 1
          $rawPassword += $charSet.Number | Get-Random -Count 1
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name "${{ env.RDP_USERNAME }}" -ErrorAction SilentlyContinue) {
              Write-Host "User '${{ env.RDP_USERNAME }}' exists. Updating password."
              Set-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password $securePass -AccountNeverExpires
          } else {
              New-LocalUser -Name "${{ env.RDP_USERNAME }}" -Password $securePass -AccountNeverExpires
          }

          Add-LocalGroupMember -Group "Administrators" -Member "${{ env.RDP_USERNAME }}"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "${{ env.RDP_USERNAME }}"
          
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "${{ env.RDP_USERNAME }}")) {
              Write-Error "User creation failed"
              exit 1
          }
          Write-Host "✅ RDP User Account Created and Configured."

      - name: 🌐 Install Tailscale VPN
        run: |
          Write-Host "➡️ Step: Installing Tailscale VPN Client..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -TimeoutSec 300
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          Write-Host "✅ Tailscale Installation Complete."

      - name: 🔑 Establish Tailscale Connection & Get IP
        run: |
          Write-Host "➡️ Step: Connecting to Tailscale Network..."
          
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-${{ github.run_id }}
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Write-Host "Attempting to get Tailscale IP (Retry: $($retries+1))..."
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4).Trim()
              if (-not $tsIP) {
                  Start-Sleep -Seconds 5
              }
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              echo "Failed to get Tailscale IP." | Out-File -FilePath discord_error.txt
              exit 1
          }

          # Get Public IP and Location
          try {
              $publicIP = (Invoke-RestMethod -Uri "https://api.ipify.org").Trim()
              $locationInfo = Invoke-RestMethod -Uri "http://ip-api.com/json/$publicIP?fields=country,regionName,city,lat,lon"
              $rdpLocation = "$($locationInfo.city), $($locationInfo.regionName), $($locationInfo.country)"
          } catch {
              $publicIP = "Unknown (Failed to retrieve)"
              $rdpLocation = "Unknown (Failed to retrieve)"
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "PUBLIC_IP=$publicIP" >> $env:GITHUB_ENV
          echo "RDP_LOCATION=$rdpLocation" >> $env:GITHUB_ENV
          
          Write-Host "✅ Tailscale Connected and IPs Retrieved."

      - name: 🔍 Verify RDP Accessibility
        run: |
          Write-Host "➡️ Step: Verifying RDP Service Accessibility..."
          Write-Host "Tailscale IP: ${{ env.TAILSCALE_IP }}"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName ${{ env.TAILSCALE_IP }} -Port 3389 -ErrorAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              echo "RDP service not accessible via Tailscale IP." | Out-File -FilePath discord_error.txt
              exit 1
          }
          Write-Host "✅ TCP connectivity successful!"

      - name: 🎮 Download MuMu Player 5 (Vayvy's Gaming Touch)
        if: env.RDP_INSTALL_MUMU == 'True'
        run: |
          Write-Host "➡️ Step: Downloading MuMu Player 5..."
          $mumuUrl = "https://github.com/VaySagab/fixit/releases/download/file/MuMu_5.0.4_pi0eurC.exe"
          $installerPath = "$env:TEMP\MuMu_5.0.4.exe"
          $maxRetries = [int]$env:DOWNLOAD_TRIES
          $minBytes = [long]$env:MIN_VALID_BYTES
          $downloadSuccess = $false

          for ($i = 1; $i -le $maxRetries; $i++) {
              Write-Host "Attempting to download MuMu Player (Attempt $i/$maxRetries)..."
              try {
                  Invoke-WebRequest -Uri $mumuUrl -OutFile $installerPath -TimeoutSec 300
                  $fileSize = (Get-Item $installerPath).Length
                  if ($fileSize -ge $minBytes) {
                      Write-Host "✅ Download successful. File size: $fileSize bytes."
                      $downloadSuccess = $true
                      break
                  } else {
                      Write-Warning "Downloaded file too small ($fileSize bytes). Retrying..."
                      Remove-Item $installerPath -ErrorAction SilentlyContinue
                  }
              } catch {
                  Write-Warning "Download failed: $($_.Exception.Message). Retrying..."
                  Remove-Item $installerPath -ErrorAction SilentlyContinue
              }
              Start-Sleep -Seconds 10
          }

          if (-not $downloadSuccess) {
              Write-Error "Failed to download MuMu Player after $maxRetries attempts."
              echo "❌ Failed to download MuMu Player." | Out-File -FilePath discord_error.txt
              exit 1
          }
          Write-Host "🎉 MuMu Player 5 has been downloaded successfully at: $installerPath"

      - name: 📢 Discord Webhook Notification - RDP Ready!
        run: |
          $discordWebhook = "${{ env.DISCORD_WEBHOOK }}"
          $runnerHostname = "$env:COMPUTERNAME"

          Write-Host "🌈 Step: Sending Beautifully Decorated RDP Ready Notification..."

          $fields = @(
              @{ name = "👑 RDP Username"; value = $env:RDP_USERNAME; inline = $true },
              @{ name = "🔑 RDP Password"; value = $env:RDP_PASSWORD; inline = $true },
              @{ name = "🌐 Tailscale IP"; value = $env:TAILSCALE_IP; inline = $true },
              @{ name = "🌍 Public IP"; value = $env:PUBLIC_IP; inline = $true },
              @{ name = "📍 RDP Location"; value = $env:RDP_LOCATION; inline = $true }
          )

          $jsonBody = @{
              username   = "🌟 Vayvy's RDP Bot 🤖"
              avatar_url = "https://i.imgur.com/your_bot_avatar.png"
              embeds     = @(
                  @{
                      title       = "🎉✨ Vayvy's Premium RDP is Ready! ✨🎉"
                      description = "💫 Your personalized RDP environment is **LIVE** on runner **$runnerHostname** 🚀 Enjoy smooth performance and secure access, crafted by Vayvy 💎"
                      color       = 16761035
                      fields      = $fields
                      thumbnail   = @{ url = "https://bit.ly/4mHgcDE" }
                      image       = @{ url = "https://bit.ly/4mHgcDE" }
                      footer      = @{
                          text     = "✨ Powered by Vayvy | Workflow ID: ${{ github.run_id }} ✨"
                          icon_url = "https://i.imgur.com/your_vayvy_logo.png"
                      }
                      timestamp   = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
                  }
              )
          } | ConvertTo-Json -Depth 4

          try {
              Invoke-RestMethod -Uri $discordWebhook -Method Post -ContentType "application/json" -Body $jsonBody
              Write-Host "[$(Get-Date)] ✅ Sent BEAUTIFUL RDP Ready notification to Discord."
          } catch {
              Write-Warning "[$(Get-Date)] ⚠️ Failed to send RDP Ready notification: $($_.Exception.Message)"
          }

      - name: 📊 Start RDP Monitoring and Keep Alive
        run: |
          $discordWebhook = "${{ env.DISCORD_WEBHOOK }}"
          $runnerHostname = "$env:COMPUTERNAME"
          $monitoringIntervalSeconds = 300
          $alertCooldownSeconds = 600
          $crashThresholdCPU = 90
          $crashThresholdRAM = 90

          $lastCpuAlert = (Get-Date).AddSeconds(-$alertCooldownSeconds)
          $lastRamAlert = (Get-Date).AddSeconds(-$alertCooldownSeconds)

          function Send-DiscordMonitoringNotification {
              param (
                  [string]$title,
                  [string]$description,
                  [int]$color,
                  [hashtable]$Metrics
              )

              $embedFields = @()
              foreach ($key in $Metrics.Keys) {
                  $embedFields += @{
                      name   = $key
                      value  = $Metrics[$key]
                      inline = $true
                  }
              }

              $jsonBody = @{
                  username = "Vayvy's RDP Bot 🤖"
                  embeds   = @(
                      @{
                          title       = $title
                          description = $description
                          color       = $color
                          fields      = $embedFields
                          footer      = @{
                              text = "Vayvy RDP Monitoring | Runner: $runnerHostname | Workflow: ${{ github.run_id }}"
                          }
                          timestamp   = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
                      }
                  )
              } | ConvertTo-Json -Depth 4

              try {
                  Invoke-RestMethod -Uri $discordWebhook -Method Post -ContentType "application/json" -Body $jsonBody
                  Write-Host "[$(Get-Date)] ✅ Sent monitoring info to Discord."
              } catch {
                  Write-Warning "[$(Get-Date)] ⚠️ Failed to send to Discord: $($_.Exception.Message)"
              }
          }

          function Get-SystemMetrics {
              $cpu = (Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue
              $memory = Get-WmiObject -Class Win32_OperatingSystem
              $totalMemoryMB = [math]::Round($memory.TotalVisibleMemorySize / 1024)
              $freeMemoryMB  = [math]::Round($memory.FreePhysicalMemory / 1024)
              $usedMemoryMB  = $totalMemoryMB - $freeMemoryMB

              if ($totalMemoryMB -eq 0) {
                  $ramUsagePercent = 0
              } else {
                  $ramUsagePercent = [math]::Round(($usedMemoryMB / $totalMemoryMB) * 100, 2)
              }

              [PSCustomObject]@{
                  CPU = [math]::Round($cpu, 2)
                  TotalRAM = $totalMemoryMB
                  UsedRAM = $usedMemoryMB
                  FreeRAM = $freeMemoryMB
                  RAMUsagePercent = $ramUsagePercent
              }
          }

          while ($true) {
              $currentTime = Get-Date
              $metrics = Get-SystemMetrics
              $cpuUsage = $metrics.CPU
              $ramUsage = $metrics.RAMUsagePercent

              # 🚨 CPU Alert
              if ($cpuUsage -ge $crashThresholdCPU -and ($currentTime - $lastCpuAlert).TotalSeconds -ge $alertCooldownSeconds) {
                  Send-DiscordMonitoringNotification -title "🚨 WARNING: High CPU Usage!" `
                      -description "Your Vayvy RDP is using too much CPU, which may cause lag or crashes." `
                      -color 16711680 `
                      -Metrics @{ "Current CPU Usage" = "$($cpuUsage)%" }
                  $lastCpuAlert = $currentTime
              }

              # 🚨 RAM Alert
              if ($ramUsage -ge $crashThresholdRAM -and ($currentTime - $lastRamAlert).TotalSeconds -ge $alertCooldownSeconds) {
                  Send-DiscordMonitoringNotification -title "🚨 WARNING: High RAM Usage!" `
                      -description "Your Vayvy RDP is consuming a lot of RAM, potentially leading to instability." `
                      -color 16729344 `
                      -Metrics @{ "Current RAM Usage" = "$($ramUsage)% ($($metrics.UsedRAM)MB / $($metrics.TotalRAM)MB)" }
                  $lastRamAlert = $currentTime
              }

              # 📊 Status Update (Periodic)
              Send-DiscordMonitoringNotification -title "📊 RDP System Status Update" `
                  -description "Here is the current performance snapshot of your RDP." `
                  -color 3447003 `
                  -Metrics @{
                      "CPU Usage" = "$($metrics.CPU)%"
                      "RAM Usage" = "$($metrics.RAMUsagePercent)% ($($metrics.UsedRAM)MB / $($metrics.TotalRAM)MB)"
                      "Free RAM" = "$($metrics.FreeRAM)MB"
                      "Public IP" = "${{ env.PUBLIC_IP }}"
                      "Tailscale IP" = "${{ env.TAILSCALE_IP }}"
                  }

              Start-Sleep -Seconds $monitoringIntervalSeconds
          }
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}

      - name: ❌ Discord Webhook Notification - Workflow Failed
        if: failure()
        run: |
          $discordWebhook = "${{ env.DISCORD_WEBHOOK }}"
          $errorMessage = "An unexpected error occurred during the RDP setup. Please check the workflow logs for details."
          $errorFile = "discord_error.txt"

          if (Test-Path $errorFile) {
              $errorMessage = Get-Content $errorFile -Raw
          }

          $jsonBody = @{
              username = "Vayvy's RDP Bot 🤖"
              avatar_url = "https://i.imgur.com/your_bot_avatar.png"
              embeds   = @(
                  @{
                      title       = "❌ Vayvy's RDP Setup Failed!"
                      description = "Uh oh! Something went wrong while setting up your Vayvy RDP. Please review the logs to diagnose the issue."
                      color       = 16711680
                      fields      = @(
                          @{ name = "Workflow ID"; value = "${{ github.run_id }}"; inline = $true },
                          @{ name = "Error Details"; value = $errorMessage; inline = $false }
                      )
                      footer      = @{
                          text     = "Vayvy RDP Error - Check GitHub Actions logs"
                          icon_url = "https://i.imgur.com/your_vayvy_logo.png"
                      }
                      timestamp   = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
                  }
              )
          } | ConvertTo-Json -Depth 4 -Compress

          try {
              Invoke-RestMethod -Uri $discordWebhook -Method Post -ContentType "application/json" -Body $jsonBody
              Write-Host "✅ Error notification sent to Discord."
          } catch {
              Write-Warning "⚠️ Failed to send Discord error notification: $($_.Exception.Message)"
          }
