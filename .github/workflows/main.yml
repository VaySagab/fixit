name: üöÄ Vayvy RDP (Tailscale Edition)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 720   # max 12 jam

    steps:
      - name: ‚öôÔ∏è Configure RDP & Firewall
        run: |
          Write-Host "üîß Enabling RDP and configuring firewall..."

          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Firewall (restrict to Tailscale subnet only)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" > $null 2>&1
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389 remoteip=100.64.0.0/10

          Restart-Service -Name TermService -Force
          Write-Host "‚úÖ RDP service enabled and firewall configured!"

      - name: üë§ Create RDP User with Secure Password
        run: |
          Write-Host "üë§ Creating user 'Vayvy' with secure generated password..."

          Add-Type -AssemblyName System.Security

          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
          }

          # Start with one guaranteed char from each required class
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 1
          $rawPassword += $charSet.Lower | Get-Random -Count 1
          $rawPassword += $charSet.Number | Get-Random -Count 1

          # Fill the rest to reach minimum safe length (8) using combined charset
          $allChars = $charSet.Upper + $charSet.Lower + $charSet.Number
          $minLen = 8
          while ($rawPassword.Count -lt $minLen) {
              $rawPassword += $allChars | Get-Random -Count 1
          }

          # Shuffle for randomness and build final password
          $password = -join ($rawPassword | Get-Random -Count $rawPassword.Count)

          # Create secure string and user (create or update)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
              try {
                  New-LocalUser -Name "Vayvy" -Password $securePass -AccountNeverExpires -PasswordNeverExpires -ErrorAction Stop
                  Write-Host "User 'Vayvy' created."
              } catch {
                  Write-Error "Failed to create user 'Vayvy': $_"
                  exit 1
              }
          } else {
              try {
                  Set-LocalUser -Name "Vayvy" -Password $securePass -ErrorAction Stop
                  Write-Host "User 'Vayvy' exists ‚Äî password updated."
              } catch {
                  Write-Error "Failed to update password for existing user 'Vayvy': $_"
                  exit 1
              }
          }

          # Ensure group membership
          try { Add-LocalGroupMember -Group "Administrators" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}

          # Export credentials to GitHub Actions environment
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=Vayvy"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$password"

          # Verify
          if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation failed"
              exit 1
          }

          Write-Host "‚úÖ User creation successful. (RDP_USER & RDP_PASS exported)"

      - name: üíª Show System Info
        run: |
          Write-Host "‚ÑπÔ∏è Gathering system information..."
          systeminfo | Select-String "OS Name","OS Version","System Type","Total Physical Memory"
          Get-CimInstance Win32_Processor | Select-Object Name,NumberOfCores,NumberOfLogicalProcessors

      - name: üíΩ Disk Usage Info (GB)
        run: |
          Write-Host "üíΩ Disk usage (GB):"
          Get-CimInstance Win32_LogicalDisk -Filter "DriveType=3" |
            Select-Object `
              @{Name='Drive';Expression={$_.DeviceID}},
              @{Name='TotalGB';Expression={[math]::Round($_.Size/1GB,2)}},
              @{Name='FreeGB';Expression={[math]::Round($_.FreeSpace/1GB,2)}},
              @{Name='UsedGB';Expression={[math]::Round( (($_.Size - $_.FreeSpace)/1GB),2)} } |
            Format-Table -AutoSize

      - name: üåê Install Tailscale
        run: |
          Write-Host "üåê Installing Tailscale..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Tailscale installed."

      - name: üîó Connect to Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          Write-Host "üîó Connecting to Tailscale network..."

          $tsExe = Get-Command tailscale.exe -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source -ErrorAction SilentlyContinue
          if (-not $tsExe) {
              $possible = @(
                  "$env:ProgramFiles\Tailscale\tailscale.exe",
                  "$env:ProgramFiles(x86)\Tailscale\tailscale.exe"
              )
              foreach ($p in $possible) { if (Test-Path $p) { $tsExe = $p; break } }
          }

          if (-not $tsExe) { Write-Error "‚ùå tailscale.exe not found."; exit 1 }

          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-routes
          if ($LASTEXITCODE -ne 0) { Write-Error "‚ùå Tailscale up failed"; exit 1 }

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              Start-Sleep -Seconds 5
              $ipOut = & $tsExe ip -4 2>$null
              if ($ipOut) {
                  $tsIP = ($ipOut | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' } | Select-Object -First 1)
              }
              $retries++
          }

          if (-not $tsIP) { Write-Error "‚ùå No Tailscale IP assigned."; exit 1 }

          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"
          Write-Host "‚úÖ Connected! Tailscale IP: $tsIP"

      - name: üõ°Ô∏è Verify RDP Port
        run: |
          Write-Host "üîé Verifying RDP port over Tailscale..."
          if (-not $env:TAILSCALE_IP) { Write-Error "‚ùå TAILSCALE_IP not set."; exit 1 }
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) { Write-Error "‚ùå TCP connection failed"; exit 1 }
          Write-Host "‚úÖ RDP port 3389 is open and accessible!"

      - name: üìã RDP Access Summary
        run: |
          Write-Host "üìù Writing RDP summary..."

          $summary = "## üîë RDP Access Information`n" +
                     "| Field     | Value             |`n" +
                     "|-----------|-------------------|`n" +
                     "| Address   | $env:TAILSCALE_IP |`n" +
                     "| Username  | $env:RDP_USER     |`n" +
                     "| Password  | $env:RDP_PASS     |`n`n" +
                     "üëâ Use **Remote Desktop Connection (mstsc.exe)** on Windows`n" +
                     "üëâ Or **Remmina** on Linux / MacOS.`n`n" +
                     "üïí Session will stay alive for **12 hours** max.`n`n" +
                     "---`n" +
                     "üîñ Watermark: RDP Made by **VayVy**, IG: vay.test"

          Set-Content -Path $env:GITHUB_STEP_SUMMARY -Value $summary -Encoding utf8
          Write-Host "‚úÖ RDP summary written."

      - name: üì¢ Print Credentials to Log
        run: |
          Write-Host "==============================="
          Write-Host "   üöÄ RDP CONNECTION DETAILS   "
          Write-Host "==============================="
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "==============================="

      - name: üìä Live Resource Monitor (Background)
        run: |
          Write-Host "üìä Starting live resource monitor..."
          $log = Join-Path $env:RUNNER_TEMP 'rdp-monitor.log'
          Start-Job -ScriptBlock {
              $logPath = $using:log
              while ($true) {
                  $cpu = (Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue
                  $ram = (Get-Counter '\Memory\Available MBytes').CounterSamples.CookedValue
                  $line = "[{0}] CPU: {1}% | RAM Available: {2} MB" -f (Get-Date -Format HH:mm:ss), [math]::Round($cpu,2), [math]::Round($ram,2)
                  Add-Content -Path $logPath -Value $line
                  Start-Sleep -Seconds 60
              }
          } | Out-Null
          Write-Host "‚úÖ Resource monitor started."

      - name: üßπ Cleanup on Exit
        if: ${{ always() }}
        run: |
          Write-Host "üßπ Cleaning up..."

          if (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue
              Write-Host "Removed local user 'Vayvy'."
          }

          netsh advfirewall firewall delete rule name="RDP-Tailscale" > $null 2>&1

          $tsExe = Get-Command tailscale.exe -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source -ErrorAction SilentlyContinue
          if (-not $tsExe) {
              $possible = @(
                  "$env:ProgramFiles\Tailscale\tailscale.exe",
                  "$env:ProgramFiles(x86)\Tailscale\tailscale.exe"
              )
              foreach ($p in $possible) { if (Test-Path $p) { $tsExe = $p; break } }
          }

          if ($tsExe) {
              try { & $tsExe logout; Write-Host "Tailscale logged out." }
              catch { Write-Host "Failed to logout tailscale: $_" }
          }

          try { Stop-Service -Name TermService -Force; Write-Host "TermService stopped." }
          catch { Write-Host "Unable to stop TermService (restricted)." }

          Write-Host "‚úÖ Cleanup completed."
