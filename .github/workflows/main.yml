name: üöÄ Vayvy RDP (Keep-Alive 12h, Optimized + MEmu + Roblox + AutoClicker)

on:
  workflow_dispatch:

jobs:
  rdp-server:
    runs-on: windows-latest
    timeout-minutes: 720   # 12 jam max

    steps:
      - name: ‚öôÔ∏è Enable RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          try { Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue } catch {}
          try { Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue } catch {}
          Write-Host "‚úÖ RDP enabled."

      - name: üë§ Create RDP User (Vayvy, with fallback password)
        run: |
          Write-Host "üë§ Creating user 'Vayvy' (with password safety fallback)..."

          Add-Type -AssemblyName System.Security

          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
          }

          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 1
          $rawPassword += $charSet.Lower | Get-Random -Count 1
          $rawPassword += $charSet.Number | Get-Random -Count 1
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          function Expand-PasswordToMinLen {
            param($pwd, $minLen)
            $all = $charSet.Upper + $charSet.Lower + $charSet.Number
            while ($pwd.Length -lt $minLen) {
              $pwd += ($all | Get-Random -Count 1)
            }
            return ($pwd.ToCharArray() | Get-Random -Count $pwd.Length) -join ''
          }

          $finalPassword = $password
          $minLen = 8
          $attempt = 1
          $created = $false

          while (-not $created -and $attempt -le 3) {
            try {
              $securePass = ConvertTo-SecureString $finalPassword -AsPlainText -Force
              if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
                New-LocalUser -Name "Vayvy" -Password $securePass -AccountNeverExpires -ErrorAction Stop
                Write-Host "User 'Vayvy' created (attempt ${attempt})."
              } else {
                Set-LocalUser -Name "Vayvy" -Password $securePass -ErrorAction Stop
                Write-Host "User 'Vayvy' password updated (attempt ${attempt})."
              }
              $created = $true
            } catch {
              Write-Host "‚ö†Ô∏è Attempt ${attempt} failed. Reason: $_"
              if ($attempt -eq 1) {
                $finalPassword = Expand-PasswordToMinLen -pwd $finalPassword -minLen $minLen
                Write-Host "‚û°Ô∏è Expanded password length to $($finalPassword.Length). Retrying..."
              } elseif ($attempt -eq 2) {
                $finalPassword = 'VayVy2025!'
                Write-Host "‚û°Ô∏è Using fixed strong fallback password..."
              } else {
                Write-Error "‚ùå All attempts failed to create/update user 'Vayvy'."
                exit 1
              }
            }
            $attempt++
          }

          try { Add-LocalGroupMember -Group "Administrators" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=Vayvy"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPassword"

          Write-Host "‚úÖ Done. Final password used: $finalPassword"

      - name: üåê Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installer`"", "/quiet", "/norestart" -Wait
          Remove-Item $installer -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Tailscale installed."

      - name: üîó Connect to Tailscale
        env:
          VAYVY_TAILSCALE_AUTHKEY: ${{ secrets.VAYVY_TAILSCALE_AUTHKEY }}
        run: |
          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @("$env:ProgramFiles\Tailscale\tailscale.exe","$env:ProgramFiles(x86)\Tailscale\tailscale.exe")
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }
          & $tsExe up --authkey=$env:VAYVY_TAILSCALE_AUTHKEY --hostname "gh-runner-${env:GITHUB_RUN_ID}" --accept-routes
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            Start-Sleep -Seconds 5
            $out = & $tsExe ip -4 2>$null
            if ($out) { $tsIP = ($out | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' } | Select-Object -First 1) }
            $retries++
          }
          Add-Content -Path $env:GITHUB_ENV -Value "VAYVY_TAILSCALE_IP=$tsIP"

      - name: üì° Check Latency
        run: |
          Write-Host "üì° Checking latency..."
          ping $env:VAYVY_TAILSCALE_IP -n 4

      - name: ‚ö° Optimize Windows for RDP
        run: |
          Write-Host "üîß Optimizing Windows..."
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          Stop-Service -Name WSearch -Force -ErrorAction SilentlyContinue
          Set-Service -Name WSearch -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
          Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Optimization done."

      - name: üì• Download & Install MuMu Player 5.6.1 (Official)
        shell: pwsh
        run: |
          $url = "https://a11.gdl.netease.com/MuMu-setup-V5.6.1.1733-overseas-0912180534.exe"
          $installer = "$env:TEMP\mumu_5.6.1.exe"

          Write-Host "üì• Downloading MuMu Player 5.6.1..."
          curl.exe -L -o $installer $url

          if (-not (Test-Path $installer)) {
            Write-Error "‚ùå Download failed!"
            exit 1
          }

          $size = (Get-Item $installer).Length
          Write-Host "Downloaded size: $size bytes"

          if ($size -lt 500000000) {
            Write-Error "‚ùå Downloaded file too small, invalid installer."
            exit 1
          }

          Write-Host "‚öôÔ∏è Installing MuMu Player 5.6.1..."
          # NSIS biasanya pakai /S (huruf besar)
          Start-Process -FilePath $installer -ArgumentList "/S" -Wait -NoNewWindow

          Write-Host "‚úÖ MuMu Player 5.6.1 installed successfully."

      - name: üì¶ Install Android Platform-Tools (ADB)
        shell: pwsh
        run: |
          $url = "https://dl.google.com/android/repository/platform-tools-latest-windows.zip"
          $zip = "$env:TEMP\platform-tools.zip"
          $out = "$env:ProgramFiles\platform-tools"

          Write-Host "üì• Downloading Android Platform-Tools..."
          Invoke-WebRequest -Uri $url -OutFile $zip

          Write-Host "üìÇ Extracting..."
          Expand-Archive -Path $zip -DestinationPath $env:ProgramFiles -Force

          $adb = Join-Path $out "adb.exe"
          if (-not (Test-Path $adb)) {
            Write-Error "‚ùå ADB extraction failed!"
            exit 1
          }

          Write-Host "‚úÖ Installed ADB at: $adb"
          Add-Content -Path $env:GITHUB_ENV -Value "ADB_PATH=$adb"

      - name: üì≤ Install Roblox + Auto Clicker
        shell: pwsh
        run: |
          $adb = $env:ADB_PATH

          if (-not (Test-Path $adb)) {
            Write-Error "‚ùå adb.exe tidak ditemukan!"
            exit 1
          }
          Write-Host "üîó adb path: $adb"

          # ========================
          # üîΩ Download Roblox menggunakan URL final APKMirror
          # ========================
          $robloxApk = "$env:TEMP\roblox.apk"
          $apkUrl = "https://www.apkmirror.com/wp-content/themes/APKMirror/download.php?id=10798361&key=3503fc76be942d93670377e02054b0d1aa71de78"

          Write-Host "üîó Direct APK URL: $apkUrl"
          curl.exe -L $apkUrl -o $robloxApk

          if (-not (Test-Path $robloxApk)) {
            Write-Error "‚ùå Gagal download Roblox APK!"
            exit 1
          }

          Write-Host "üì¶ Installing Roblox..."
          & $adb install -r $robloxApk

          # ========================
          # üîΩ Download Auto Clicker (placeholder)
          # ========================
          $autoClickerApk = "$env:TEMP\autoclicker.apk"
          curl.exe -L "https://example.com/autoclicker.apk" -o $autoClickerApk

          if (-not (Test-Path $autoClickerApk)) {
            Write-Error "‚ùå Gagal download Auto Clicker APK!"
            exit 1
          }

          Write-Host "üì¶ Installing Auto Clicker..."
          & $adb install -r $autoClickerApk

          Write-Host "‚úÖ Roblox + Auto Clicker installed successfully."
          
      - name: ‚úÖ Done
        run: Write-Host "MuMu Player + Roblox + Auto Clicker installed!"

      - name: üìã RDP Summary
        run: |
          Write-Host "## üîë RDP Access"
          Write-Host '```text'
          Write-Host "Address : $env:VAYVY_TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host '```'

      - name: üïí Keep Alive 12h + Cleanup
        run: |
          Write-Host "üîÑ Keeping VM alive..."
          for ($m = 1; $m -le 720; $m++) {
            Write-Host "‚è≥ Minute ${m} / 720"
            Start-Sleep -Seconds 60
          }
          Write-Host "üßπ Cleaning up..."
          if (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue) {
            try { Remove-LocalUser -Name "Vayvy" -ErrorAction Stop } catch {}
          }
          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if ($tsExe) { try { & $tsExe logout } catch {} }
          try { Stop-Service -Name TermService -Force } catch {}
          Write-Host "‚úÖ Cleanup finished."
