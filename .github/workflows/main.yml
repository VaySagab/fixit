name: "üöÄ Vayvy's Ultimate RDP Playground üåü"

on:
  workflow_dispatch:
    inputs:
      rdp_username:
        description: "üî• Desired RDP Username (e.g., VayvyUser)"
        required: true
        default: "Vayvy"
      rdp_password:
        description: "üîí Strong RDP Password (min 12 chars, incl. special)"
        required: true
        default: "Vay2025!"
      rdp_enable_max_performance:
        description: "‚ö° Maximize RDP Performance (True/False)"
        required: true
        default: "True"
      rdp_install_mumu:
        description: "üéÆ Install MuMu Player 5 (True/False)"
        required: true
        default: "True"
      discord_notify_on_finish:
        description: "üîî Send Discord Notification on Completion (True/False)"
        required: true
        default: "True"
      discord_webhook_link:
        description: "üîß Send Webhook Discord Link"
        required: true
        default: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"

env:
  DISCORD_WEBHOOK: ${{ github.event.inputs.discord_webhook_link }}
  KEEP_ALIVE_MINUTES: 720 # Runner will stay active for 12 hours
  EMULATOR_BOOT_WAIT_SECONDS: 90
  EMULATOR_POLL_RETRIES: 6
  DOWNLOAD_TRIES: 4
  MIN_VALID_BYTES: 2000000 # Minimum expected size for MuMu installer
  RDP_WM_TEXT: "VayVy RDP - Made with üíñ"
  RDP_USERNAME: ${{ github.event.inputs.rdp_username }}
  RDP_PASSWORD: ${{ github.event.inputs.rdp_password }}
  RDP_MAX_PERFORMANCE: ${{ github.event.inputs.rdp_enable_max_performance }}
  RDP_INSTALL_MUMU: ${{ github.event.inputs.rdp_install_mumu }}
  DISCORD_NOTIFY_ON_FINISH: ${{ github.event.inputs.discord_notify_on_finish }}

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 720

    steps:
      - name: üåüüöÄ Vayvy's RDP Boot-up Sequence Initiated üöÄüåü
        run: |
          Write-Host "üöÄ Workflow started by: ${{ github.actor }}"
          Write-Host "‚è∞ Current UTC Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
          Write-Host "üñ•Ô∏è Runner OS: ${{ runner.os }}"
          Write-Host "‚è≥ Max RDP Uptime: ${{ env.KEEP_ALIVE_MINUTES }} minutes"
          Write-Host ""

      - name: ‚öôÔ∏è Configure Core RDP Settings
        run: |
          Write-Host "‚û°Ô∏è Step: Configuring Remote Desktop Services..."
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Remove existing rule to avoid duplication and add a new one for Tailscale
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service to apply changes
          Restart-Service -Name TermService -Force
          Write-Host "‚úÖ RDP Core Settings Configured Successfully."

      - name: üîí Create RDP User with Secure Password
        run: |
          Write-Host "‚û°Ô∏è Step: Creating Secure RDP User Account..."
          $rdpUser = "${{ env.RDP_USERNAME }}"
          $rdpPass = "${{ env.RDP_PASSWORD }}"

          $securePass = ConvertTo-SecureString $rdpPass -AsPlainText -Force

          if (Get-LocalUser -Name $rdpUser -ErrorAction SilentlyContinue) {
              Write-Host "User '$rdpUser' exists. Updating password."
              Set-LocalUser -Name $rdpUser -Password $securePass -AccountNeverExpires
          } else {
              New-LocalUser -Name $rdpUser -Password $securePass -AccountNeverExpires
          }

          Add-LocalGroupMember -Group "Administrators" -Member $rdpUser
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $rdpUser
          
          # Pass credentials to the next steps as environment variables
          echo "RDP_USERNAME=$rdpUser" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$rdpPass" >> $env:GITHUB_ENV
          
          Write-Host "‚úÖ RDP User Account Created and Configured."

      - name: üöÄ Optimize RDP for Maximum Performance
        if: env.RDP_MAX_PERFORMANCE == 'True'
        run: |
          Write-Host "‚û°Ô∏è Step: Applying Performance Optimizations for a Smooth RDP Experience..."

          # Disable visual effects for performance
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Value ([byte[]](0x90,0x12,0x01,0x80,0x10,0x00,0x00,0x00)) -Force
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "MinAnimate" -Value "0" -Force

          # Switch to High Performance power plan
          $highPerf = (powercfg -list | Select-String "High Performance").ToString().Split()[3]
          if ($highPerf) {
              powercfg -setactive $highPerf
              Write-Host "‚ÑπÔ∏è Set power plan to High Performance."
          }

          # RDP tweaks for better compression and caching
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxLossyCompression" -Value 2 -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "MaxBMPCacheSize" -Value 65536 -Force
          Write-Host "‚úÖ RDP Performance Optimizations Applied."

      - name: üßπ Vayvy's RDP Cleanup & Optimization
        run: |
          Write-Host ""
          Write-Host "üåüüöÄ Starting Vayvy's RDP Cleanup & Optimization Script üöÄüåü"
          Write-Host "============================================================"

          # Section 1: Remove Unnecessary Windows (UWP) Apps
          Write-Host "‚û°Ô∏è Removing unnecessary Windows apps..."
          $appsToRemove = @(
              "Microsoft.ZuneVideo", "Microsoft.Windows.Photos", "Microsoft.BingWeather",
              "Microsoft.3DBuilder", "Microsoft.OneConnect", "Microsoft.WindowsMaps",
              "Microsoft.GetHelp", "Microsoft.Getstarted", "Microsoft.WindowsFeedbackHub",
              "Microsoft.SkypeApp", "Microsoft.XboxApp", "Microsoft.XboxGameOverlay",
              "Microsoft.XboxGamingOverlay", "Microsoft.XboxIdentityProvider",
              "Microsoft.XboxSpeechToTextOverlay", "Microsoft.YourPhone",
              "Microsoft.Advertising.Xaml"
          )

          foreach ($app in $appsToRemove) {
              Write-Host "üóëÔ∏è Attempting to remove: $app..."
              Get-AppxPackage -Name $app -AllUsers -ErrorAction SilentlyContinue | Remove-AppxPackage -ErrorAction SilentlyContinue
              Get-AppxProvisionedPackage -Online | Where-Object DisplayName -eq $app | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue
              Write-Host "‚úÖ Successfully processed $app."
          }
          Write-Host "‚úÖ Finished removing unnecessary apps."
          Write-Host "============================================================"

          # Section 2: Stop Unnecessary Background Processes
          Write-Host "‚û°Ô∏è Stopping unnecessary background processes..."
          $processesToStop = @(
              "OneCloud", "OneDrive", "Skype", "Teams", "RuntimeBroker",
              "ApplicationFrameHost", "SearchIndexer"
          )

          foreach ($process in $processesToStop) {
              Write-Host "‚èπÔ∏è Attempting to stop process: $process..."
              try {
                  Stop-Process -Name $process -Force -ErrorAction Stop
                  Write-Host "‚úÖ Successfully stopped process $process."
              } catch {
                  Write-Host "‚ÑπÔ∏è Process $process not found or already stopped. Skipping..."
              }
          }
          Write-Host "‚úÖ Finished stopping unnecessary processes."
          Write-Host "============================================================"

          Write-Host "üéâ Cleanup & Optimization Complete!"

      - name: üåê Install Tailscale VPN
        run: |
          Write-Host "‚û°Ô∏è Step: Installing Tailscale VPN Client..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -TimeoutSec 300
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Tailscale Installation Complete."

      - name: üîë Establish Tailscale Connection & Get IP
        run: |
          Write-Host "‚û°Ô∏è Step: Connecting to Tailscale Network..."
          
          # Bring up Tailscale with the provided auth key
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=Vayvy-RDP-gh-${{ github.run_id }} --advertise-routes=0.0.0.0/0,::/0
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Write-Host "Attempting to get Tailscale IP (Retry: $($retries+1))..."
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4).Trim()
              if (-not $tsIP) {
                  Start-Sleep -Seconds 10
              }
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned after multiple retries. Exiting."
              echo "Failed to get Tailscale IP." | Out-File -FilePath discord_error.txt
              exit 1
          }

          # Get Public IP and Location
          try {
              $publicIP = (Invoke-RestMethod -Uri "https://api.ipify.org").Trim()
              $locationInfo = Invoke-RestMethod -Uri "http://ip-api.com/json/$publicIP?fields=country,regionName,city,lat,lon"
              $rdpLocation = "$($locationInfo.city), $($locationInfo.regionName), $($locationInfo.country) (Lat: $($locationInfo.lat), Lon: $($locationInfo.lon))"
          } catch {
              $publicIP = "Unknown (Failed to retrieve)"
              $rdpLocation = "Unknown (Failed to retrieve)"
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "PUBLIC_IP=$publicIP" >> $env:GITHUB_ENV
          echo "RDP_LOCATION=$rdpLocation" >> $env:GITHUB_ENV
          
          Write-Host "‚úÖ Tailscale Connected and IPs Retrieved."

      - name: üîç Verify RDP Accessibility
        run: |
          Write-Host "‚û°Ô∏è Step: Verifying RDP Service Accessibility..."
          Write-Host "Tailscale IP: ${{ env.TAILSCALE_IP }}"
          
          $testResult = Test-NetConnection -ComputerName ${{ env.TAILSCALE_IP }} -Port 3389 -ErrorAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed via Tailscale IP."
              echo "RDP service not accessible via Tailscale IP." | Out-File -FilePath discord_error.txt
              exit 1
          }
          Write-Host "‚úÖ TCP Connectivity to RDP Port 3389 (via Tailscale) Successful!"

      - name: üñºÔ∏è Set Custom Desktop Background (Vayvy's Style)
        run: |
          Write-Host ""
          Write-Host "üåå‚ú®=================================================‚ú®üåå"
          Write-Host "       üíé Vayvy's RDP - Your Dream Workspace üíé       "
          Write-Host "   üåà Background applied with a touch of elegance üåà   "
          Write-Host "         üöÄ Made for smooth & premium vibes üöÄ         "
          Write-Host "üåå‚ú®=================================================‚ú®üåå"
          Write-Host ""
          $bgUrl = "https://github.com/VaySagab/fixit/releases/download/file/image.png"
          $bgPath = "$env:TEMP\Vayvy_RDP_Background.jpg"
          Invoke-WebRequest -Uri $bgUrl -OutFile $bgPath -UseBasicParsing
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name WallPaper -Value $bgPath -Force
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name TileWallpaper -Value 0 -Force
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name WallpaperStyle -Value 2 -Force
          RUNDLL32.EXE user32.dll,UpdatePerUserSystemParameters 1, True
          Write-Host "‚úÖ Custom Wallpaper Applied Successfully!"

      - name: üéÆ Download MuMu Player 5 (Vayvy's Gaming Touch)
        if: env.RDP_INSTALL_MUMU == 'True'
        run: |
          Write-Host "‚û°Ô∏è Step: Downloading MuMu Player 5..."
          $mumuUrl = "https://github.com/VaySagab/fixit/releases/download/file/MuMu_5.0.4_pi0eurC.exe"
          $installerPath = "$env:TEMP\MuMu_5.0.4.exe"
          $maxRetries = [int]$env:DOWNLOAD_TRIES
          $minBytes = [long]$env:MIN_VALID_BYTES
          $downloadSuccess = $false

          for ($i = 1; $i -le $maxRetries; $i++) {
              Write-Host "Attempting to download MuMu Player (Attempt $i/$maxRetries)..."
              try {
                  Invoke-WebRequest -Uri $mumuUrl -OutFile $installerPath -TimeoutSec 300
                  $fileSize = (Get-Item $installerPath).Length
                  if ($fileSize -ge $minBytes) {
                      Write-Host "‚úÖ Download successful. File size: $fileSize bytes."
                      $downloadSuccess = $true
                      break
                  } else {
                      Write-Warning "Downloaded file too small ($fileSize bytes). Retrying..."
                      Remove-Item $installerPath -ErrorAction SilentlyContinue
                  }
              } catch {
                  Write-Warning "Download failed: $($_.Exception.Message). Retrying..."
                  Remove-Item $installerPath -ErrorAction SilentlyContinue
              }
              Start-Sleep -Seconds 10
          }

          if (-not $downloadSuccess) {
              Write-Error "Failed to download MuMu Player after $maxRetries attempts."
              echo "‚ùå Failed to download MuMu Player." | Out-File -FilePath discord_error.txt
              exit 1
          }
          Write-Host "üéâ MuMu Player 5 has been downloaded successfully at: $installerPath"

      - name: üì¢ Discord Webhook Notification - RDP Ready!
        if: ${{ env.DISCORD_NOTIFY_ON_FINISH == 'True' }}
        run: |
          $discordWebhook = "${{ env.DISCORD_WEBHOOK }}"
          $runnerHostname = "$env:COMPUTERNAME"

          Write-Host "üåà Step: Sending Beautifully Decorated RDP Ready Notification..."

          $fields = @(
              @{ name = "üëë RDP Username"; value = $env:RDP_USERNAME; inline = $true },
              @{ name = "üîë RDP Password"; value = $env:RDP_PASSWORD; inline = $true },
              @{ name = "üåê Tailscale IP"; value = $env:TAILSCALE_IP; inline = $true },
              @{ name = "üåç Public IP"; value = $env:PUBLIC_IP; inline = $true },
              @{ name = "üìç RDP Location"; value = $env:RDP_LOCATION; inline = $true }
          )

          $jsonBody = @{
              username   = "üåü Vayvy's RDP Bot ü§ñ"
              avatar_url = "https://i.imgur.com/your_bot_avatar.png"
              embeds     = @(
                  @{
                      title       = "üéâ‚ú® Vayvy's Premium RDP is Ready! ‚ú®üéâ"
                      description = "üí´ Your personalized RDP environment is **LIVE** on runner **$runnerHostname** üöÄ Enjoy smooth performance and secure access, crafted by Vayvy üíé"
                      color       = 16761035
                      fields      = $fields
                      thumbnail   = @{ url = "https://bit.ly/4mHgcDE" }
                      image       = @{ url = "https://bit.ly/4mHgcDE" }
                      footer      = @{
                          text     = "‚ú® Powered by Vayvy | Workflow ID: ${{ github.run_id }} ‚ú®"
                          icon_url = "https://i.imgur.com/your_vayvy_logo.png"
                      }
                      timestamp   = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
                  }
              )
          } | ConvertTo-Json -Depth 4

          try {
              Invoke-RestMethod -Uri $discordWebhook -Method Post -ContentType "application/json" -Body $jsonBody
              Write-Host "[$(Get-Date)] ‚úÖ Sent BEAUTIFUL RDP Ready notification to Discord."
          } catch {
              Write-Warning "[$(Get-Date)] ‚ö†Ô∏è Failed to send RDP Ready notification: $($_.Exception.Message)"
          }

      - name: üìä Start RDP Monitoring and Keep Alive
        run: |
          $discordWebhook = "${{ env.DISCORD_WEBHOOK }}"
          $runnerHostname = "$env:COMPUTERNAME"
          $monitoringIntervalSeconds = 300
          $alertCooldownSeconds = 600
          $crashThresholdCPU = 90
          $crashThresholdRAM = 90

          $lastCpuAlert = (Get-Date).AddSeconds(-$alertCooldownSeconds)
          $lastRamAlert = (Get-Date).AddSeconds(-$alertCooldownSeconds)

          function Send-DiscordMonitoringNotification {
              param (
                  [string]$title,
                  [string]$description,
                  [int]$color,
                  [hashtable]$Metrics
              )

              $embedFields = @()
              foreach ($key in $Metrics.Keys) {
                  $embedFields += @{
                      name   = $key
                      value  = $Metrics[$key]
                      inline = $true
                  }
              }

              $jsonBody = @{
                  username = "Vayvy's RDP Bot ü§ñ"
                  embeds   = @(
                      @{
                          title       = $title
                          description = $description
                          color       = $color
                          fields      = $embedFields
                          footer      = @{
                              text = "Vayvy RDP Monitoring | Runner: $runnerHostname | Workflow: ${{ github.run_id }}"
                          }
                          timestamp   = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
                      }
                  )
              } | ConvertTo-Json -Depth 4

              try {
                  Invoke-RestMethod -Uri $discordWebhook -Method Post -ContentType "application/json" -Body $jsonBody
                  Write-Host "[$(Get-Date)] ‚úÖ Sent monitoring info to Discord."
              } catch {
                  Write-Warning "[$(Get-Date)] ‚ö†Ô∏è Failed to send to Discord: $($_.Exception.Message)"
              }
          }

          function Get-SystemMetrics {
              $cpu = (Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue
              $memory = Get-WmiObject -Class Win32_OperatingSystem
              $totalMemoryMB = [math]::Round($memory.TotalVisibleMemorySize / 1024)
              $freeMemoryMB  = [math]::Round($memory.FreePhysicalMemory / 1024)
              $usedMemoryMB  = $totalMemoryMB - $freeMemoryMB

              if ($totalMemoryMB -eq 0) {
                  $ramUsagePercent = 0
              } else {
                  $ramUsagePercent = [math]::Round(($usedMemoryMB / $totalMemoryMB) * 100, 2)
              }

              [PSCustomObject]@{
                  CPU = [math]::Round($cpu, 2)
                  TotalRAM = $totalMemoryMB
                  UsedRAM = $usedMemoryMB
                  FreeRAM = $freeMemoryMB
                  RAMUsagePercent = $ramUsagePercent
              }
          }

          while ($true) {
              $currentTime = Get-Date
              $metrics = Get-SystemMetrics
              $cpuUsage = $metrics.CPU
              $ramUsage = $metrics.RAMUsagePercent

              # üö® CPU Alert
              if ($cpuUsage -ge $crashThresholdCPU -and ($currentTime - $lastCpuAlert).TotalSeconds -ge $alertCooldownSeconds) {
                  Send-DiscordMonitoringNotification -title "üö® WARNING: High CPU Usage!" `
                      -description "Your Vayvy RDP is using too much CPU, which may cause lag or crashes." `
                      -color 16711680 `
                      -Metrics @{ "Current CPU Usage" = "$($cpuUsage)%" }
                  $lastCpuAlert = $currentTime
              }

              # üö® RAM Alert
              if ($ramUsage -ge $crashThresholdRAM -and ($currentTime - $lastRamAlert).TotalSeconds -ge $alertCooldownSeconds) {
                  Send-DiscordMonitoringNotification -title "üö® WARNING: High RAM Usage!" `
                      -description "Your Vayvy RDP is consuming a lot of RAM, potentially leading to instability." `
                      -color 16729344 `
                      -Metrics @{ "Current RAM Usage" = "$($ramUsage)% ($($metrics.UsedRAM)MB / $($metrics.TotalRAM)MB)" }
                  $lastRamAlert = $currentTime
              }

              # üìä Status Update (Periodic)
              Send-DiscordMonitoringNotification -title "üìä RDP System Status Update" `
                  -description "Here is the current performance snapshot of your RDP." `
                  -color 3447003 `
                  -Metrics @{
                      "CPU Usage" = "$($metrics.CPU)%"
                      "RAM Usage" = "$($metrics.RAMUsagePercent)% ($($metrics.UsedRAM)MB / $($metrics.TotalRAM)MB)"
                      "Free RAM" = "$($metrics.FreeRAM)MB"
                      "Public IP" = "${{ env.PUBLIC_IP }}"
                      "Tailscale IP" = "${{ env.TAILSCALE_IP }}"
                  }

              Start-Sleep -Seconds $monitoringIntervalSeconds
          }
        env:
          DISCORD_WEBHOOK: ${{ env.DISCORD_WEBHOOK }}

      - name: ‚ùå Discord Webhook Notification - Workflow Failed
        if: ${{ failure() && env.DISCORD_NOTIFY_ON_FINISH == 'True' }}
        run: |
          $discordWebhook = "${{ env.DISCORD_WEBHOOK }}"
          $errorMessage = "An unexpected error occurred during the RDP setup. Please check the workflow logs for details."
          $errorFile = "discord_error.txt"

          if (Test-Path $errorFile) {
              $errorMessage = Get-Content $errorFile -Raw
          }

          $jsonBody = @{
              username = "Vayvy's RDP Bot ü§ñ"
              avatar_url = "https://i.imgur.com/your_bot_avatar.png"
              embeds   = @(
                  @{
                      title       = "‚ùå Vayvy's RDP Setup Failed!"
                      description = "Uh oh! Something went wrong while setting up your Vayvy RDP. Please review the logs to diagnose the issue."
                      color       = 16711680
                      fields      = @(
                          @{ name = "Workflow ID"; value = "${{ github.run_id }}"; inline = $true },
                          @{ name = "Error Details"; value = $errorMessage; inline = $false }
                      )
                      footer      = @{
                          text     = "Vayvy RDP Error - Check GitHub Actions logs"
                          icon_url = "https://i.imgur.com/your_vayvy_logo.png"
                      }
                      timestamp   = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
                  }
              )
          } | ConvertTo-Json -Depth 4 -Compress

          try {
              Invoke-RestMethod -Uri $discordWebhook -Method Post -ContentType "application/json" -Body $jsonBody
              Write-Host "‚úÖ Error notification sent to Discord."
          } catch {
              Write-Warning "‚ö†Ô∏è Failed to send Discord error notification: $($_.Exception.Message)"
          }
