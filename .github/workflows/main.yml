name: 🚀 Vayvy RDP (Keep-Alive 12h, Optimized + MEmu + Roblox + AutoClicker)

on:
  workflow_dispatch:

jobs:
  rdp-server:
    runs-on: windows-latest
    timeout-minutes: 720   # 12 jam

    steps:
      - name: ⚙️ Enable RDP
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⚙️ [STEP 1] Enabling Remote Desktop Protocol (RDP)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          try { Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue } catch {}
          try { Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue } catch {}

          Write-Host "✅ RDP enabled successfully!" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 👤 Create RDP User (Vayvy, with fallback password)
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "👤 [STEP 2] Creating RDP User 'Vayvy'" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 1
          $rawPassword += $charSet.Lower | Get-Random -Count 1
          $rawPassword += $charSet.Number | Get-Random -Count 1
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          function Expand-PasswordToMinLen {
            param($pwd, $minLen)
            $all = $charSet.Upper + $charSet.Lower + $charSet.Number
            while ($pwd.Length -lt $minLen) {
              $pwd += ($all | Get-Random -Count 1)
            }
            return ($pwd.ToCharArray() | Get-Random -Count $pwd.Length) -join ''
          }

          $finalPassword = $password
          $minLen = 8
          $attempt = 1
          $created = $false

          while (-not $created -and $attempt -le 3) {
            try {
              $securePass = ConvertTo-SecureString $finalPassword -AsPlainText -Force
              if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
                New-LocalUser -Name "Vayvy" -Password $securePass -AccountNeverExpires -ErrorAction Stop
                Write-Host "User 'Vayvy' created (attempt ${attempt})."
              } else {
                Set-LocalUser -Name "Vayvy" -Password $securePass -ErrorAction Stop
                Write-Host "User 'Vayvy' password updated (attempt ${attempt})."
              }
              $created = $true
            } catch {
              Write-Host "⚠️ Attempt ${attempt} failed. Reason: $_"
              if ($attempt -eq 1) {
                $finalPassword = Expand-PasswordToMinLen -pwd $finalPassword -minLen $minLen
                Write-Host "➡️ Expanded password length to $($finalPassword.Length). Retrying..."
              } elseif ($attempt -eq 2) {
                $finalPassword = 'VayVy2025!'
                Write-Host "➡️ Using fixed strong fallback password..."
              } else {
                Write-Error "❌ All attempts failed to create/update user 'Vayvy'."
                exit 1
              }
            }
            $attempt++
          }

          try { Add-LocalGroupMember -Group "Administrators" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=Vayvy"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPassword"

          Write-Host "🎉 User 'Vayvy' ready! (Final password: $finalPassword)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 🌐 Install Tailscale
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🌐 [STEP 3] Installing Tailscale VPN" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installer`"", "/quiet", "/norestart" -Wait
          Remove-Item $installer -Force -ErrorAction SilentlyContinue

          Write-Host "✅ Tailscale installed successfully!" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 🔗 Connect to Tailscale
        env:
          VAYVY_TAILSCALE_AUTHKEY: ${{ secrets.VAYVY_TAILSCALE_AUTHKEY }}
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🔗 [STEP 4] Connecting to Tailscale Network" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @("$env:ProgramFiles\Tailscale\tailscale.exe","$env:ProgramFiles(x86)\Tailscale\tailscale.exe")
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }
          & $tsExe up --authkey=$env:VAYVY_TAILSCALE_AUTHKEY --hostname "gh-runner-${env:GITHUB_RUN_ID}" --accept-routes
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            Start-Sleep -Seconds 5
            $out = & $tsExe ip -4 2>$null
            if ($out) { $tsIP = ($out | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' } | Select-Object -First 1) }
            $retries++
          }
          Add-Content -Path $env:GITHUB_ENV -Value "VAYVY_TAILSCALE_IP=$tsIP"

          Write-Host "🌍 Connected! IP: $tsIP" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""
      - name: ⚡ Optimize Windows for RDP
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⚡ [STEP 5] Optimizing Windows for Performance" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          Stop-Service -Name WSearch -Force -ErrorAction SilentlyContinue
          Set-Service -Name WSearch -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
          Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue

          Write-Host "✅ Optimization completed." -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 📡 Check Latency
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "📡 [STEP 6] Checking Network Latency" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          ping $env:VAYVY_TAILSCALE_IP -n 4

          Write-Host "✅ Latency check completed." -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 📥 Download & Install MuMu Player 5.6.1 (Official)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "📥 [STEP 7] Installing MuMu Emulator (v5.6.1)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $url = "https://github.com/VaySagab/fixit/commit/8866ee20d5182894f35cf1b6d3f3abda4c7d9a43"
          $installer = "$env:TEMP\mumu_5.6.1.exe"

          Write-Host "📥 Downloading MuMu Player..."
          curl.exe -L -o $installer $url

          if (-not (Test-Path $installer)) {
            Write-Error "❌ Download failed!"
            exit 1
          }

          $size = (Get-Item $installer).Length
          Write-Host "📏 Downloaded size: $size bytes"

          if ($size -lt 500000000) {
            Write-Error "❌ Downloaded file too small, invalid installer."
            exit 1
          }

          Write-Host "⚙️ Installing MuMu Player silently..."
          Start-Process -FilePath $installer -ArgumentList "/S" -Wait -NoNewWindow

          Write-Host "✅ MuMu Player installed successfully!" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 📦 Install Android Platform-Tools (ADB)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "📦 [STEP 8] Installing Android Platform-Tools (ADB)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $url = "https://dl.google.com/android/repository/platform-tools-latest-windows.zip"
          $zip = "$env:TEMP\platform-tools.zip"
          $out = "$env:ProgramFiles\platform-tools"

          Write-Host "📥 Downloading Platform-Tools..."
          Invoke-WebRequest -Uri $url -OutFile $zip

          Write-Host "📂 Extracting..."
          Expand-Archive -Path $zip -DestinationPath $env:ProgramFiles -Force

          $adb = Join-Path $out "adb.exe"
          if (-not (Test-Path $adb)) {
            Write-Error "❌ ADB extraction failed!"
            exit 1
          }

          Write-Host "✅ Installed ADB at: $adb" -ForegroundColor Yellow
          Add-Content -Path $env:GITHUB_ENV -Value "ADB_PATH=$adb"
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: ▶️ Start MuMu Emulator
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "▶️ [STEP 9] Starting MuMu Emulator" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $emuExe = "C:\MuMu\MuMu_5.0.4_pi0eurC.exe"
          if (-not (Test-Path $emuExe)) {
            Write-Error "❌ Emulator .exe tidak ditemukan di $emuExe"
            exit 1
          }

          Write-Host "🚀 Menjalankan emulator dari $emuExe ..."
          Start-Process -FilePath $emuExe

          Write-Host "⏳ Menunggu emulator boot (90s)..."
          Start-Sleep -Seconds 90

          Write-Host "✅ Emulator started successfully!" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 📲 Install Roblox + Auto Clicker
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "📲 [STEP 10] Installing Roblox + Auto Clicker" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $adb = $env:ADB_PATH
          if (-not (Test-Path $adb)) {
            Write-Error "❌ adb.exe tidak ditemukan!"
            exit 1
          }

          # ========================
          # 🔽 Roblox APK
          # ========================
          $robloxApk = "$env:TEMP\roblox.apk"
          $robloxUrl = "https://www.apkmirror.com/wp-content/themes/APKMirror/download.php?id=10798361&key=3503fc76be942d93670377e02054b0d1aa71de78"
          Write-Host "📥 Downloading Roblox..."
          curl.exe -L $robloxUrl -o $robloxApk

          if (-not (Test-Path $robloxApk)) {
            Write-Error "❌ Gagal download Roblox APK!"
            exit 1
          }

          Write-Host "📦 Installing Roblox..."
          & $adb install -r $robloxApk

          # ========================
          # 🔽 Auto Clicker APK
          # ========================
          $autoClickerApk = "$env:TEMP\autoclicker.apk"
          $autoClickerUrl = "https://www.apkmirror.com/wp-content/themes/APKMirror/download.php?id=9070571&key=e39ab6abe1fae5dab6730f4eab125ef0c519826f"
          Write-Host "📥 Downloading Auto Clicker..."
          curl.exe -L $autoClickerUrl -o $autoClickerApk

          if (-not (Test-Path $autoClickerApk)) {
            Write-Error "❌ Gagal download Auto Clicker APK!"
            exit 1
          }

          Write-Host "📦 Installing Auto Clicker..."
          & $adb install -r $autoClickerApk

          Write-Host "✅ Roblox + Auto Clicker installed successfully." -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 🛡️ Emulator Crash Monitor
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🛡️ [STEP 11] Checking Emulator Status" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $adb = $env:ADB_PATH
          $emuStatus = & $adb devices | Select-String "device"

          if (-not $emuStatus) {
            Write-Error "❌ Emulator crash detected!"
            exit 1
          } else {
            Write-Host "✅ Emulator is running fine." -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: 🔔 Discord Notification (Detailed RDP Info)
        if: env.DISCORD_WEBHOOK != ''
        shell: pwsh
        run: |
          $rdpUser  = $env:RDP_USER
          $rdpPass  = $env:RDP_PASS
          $githubUser = $env:GITHUB_ACTOR

          # Cek IP publik
          try {
            $ip = (Invoke-RestMethod -Uri "https://api.ipify.org?format=json").ip
          } catch {
            $ip = "Unknown"
          }

          # Cek lokasi (GeoIP sederhana)
          try {
            $geo = Invoke-RestMethod -Uri "https://ipapi.co/$ip/json"
            $location = "$($geo.city), $($geo.region), $($geo.country_name)"
          } catch {
            $location = "Unknown"
          }

          $msg = @{
            username = "MuMu Bot"
            embeds = @(
              @{
                title = "📡 RDP Session Created"
                color = 5814783
                fields = @(
                  @{ name = "👤 GitHub User"; value = $githubUser; inline = $true }
                  @{ name = "🖥️ RDP User"; value = $rdpUser; inline = $true }
                  @{ name = "🔑 RDP Password"; value = $rdpPass; inline = $true }
                  @{ name = "🌍 IP Address"; value = $ip; inline = $true }
                  @{ name = "📍 Location"; value = $location; inline = $false }
                )
                footer = @{ text = "Workflow by $githubUser" }
                timestamp = (Get-Date).ToString("o")
              }
            )
          } | ConvertTo-Json -Depth 5

          Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $msg

      - name: 🛡️ Emulator Crash Monitor + Webhook
        if: env.DISCORD_WEBHOOK != ''
        shell: pwsh
        continue-on-error: true
        run: |
          $adb = $env:ADB_PATH
          $emuStatus = & $adb devices | Select-String "device"

          if (-not $emuStatus) {
            Write-Error "❌ Emulator crash detected!"

            $msg = @{
              username = "MuMu Bot"
              content = "⚠️ Emulator crash terdeteksi pada runner **$env:GITHUB_RUN_ID** oleh **$env:GITHUB_ACTOR**"
            } | ConvertTo-Json

            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $msg
            exit 1
          } else {
            Write-Host "✅ Emulator running normal."
          }

      - name: 🕒 Keep Alive 12h + Cleanup
        shell: pwsh
        run: |
          Write-Host "🔄 Keeping VM alive for 12 hours..."
          for ($m = 1; $m -le 720; $m++) {
            Write-Host "⏳ Minute ${m} / 720"
            Start-Sleep -Seconds 60
          }

          Write-Host "🧹 Cleaning up..."
          if (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue) {
            try { Remove-LocalUser -Name "Vayvy" -ErrorAction Stop } catch {}
          }

          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if ($tsExe) {
            try { & $tsExe logout } catch {}
          }

          try { Stop-Service -Name TermService -Force } catch {}

          Write-Host "✅ Cleanup finished."
