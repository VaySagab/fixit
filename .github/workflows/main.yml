name: üöÄ Vayvy RDP (Keep-Alive 12h, Optimized)

on:
  workflow_dispatch:

jobs:
  rdp-server:
    runs-on: windows-latest
    timeout-minutes: 720   # 12 jam max

    steps:
      - name: ‚öôÔ∏è Enable RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          try { Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue } catch {}
          try { Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue } catch {}
          Write-Host "‚úÖ RDP enabled."

      - name: üë§ Create RDP User (use your style but with fallback)
        run: |
          Write-Host "üë§ Creating user 'Vayvy' (using your password pattern, with safe fallback)..."

          Add-Type -AssemblyName System.Security

          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
          }

          # Build initial password (1 upper, 1 lower, 1 number)
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 1
          $rawPassword += $charSet.Lower | Get-Random -Count 1
          $rawPassword += $charSet.Number | Get-Random -Count 1
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          # Helper: expand password until min length (8)
          function Expand-PasswordToMinLen {
            param($pwd, $minLen)
            $all = $charSet.Upper + $charSet.Lower + $charSet.Number
            while ($pwd.Length -lt $minLen) {
              $pwd += ($all | Get-Random -Count 1)
            }
            return ($pwd.ToCharArray() | Get-Random -Count $pwd.Length) -join ''
          }

          $finalPassword = $password
          $minLen = 8
          $attempt = 1
          $created = $false

          while (-not $created -and $attempt -le 3) {
            try {
              $securePass = ConvertTo-SecureString $finalPassword -AsPlainText -Force

              if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
                New-LocalUser -Name "Vayvy" -Password $securePass -AccountNeverExpires -ErrorAction Stop
                Write-Host "User 'Vayvy' created (attempt ${attempt})."
              } else {
                Set-LocalUser -Name "Vayvy" -Password $securePass -ErrorAction Stop
                Write-Host "User 'Vayvy' password set/updated (attempt ${attempt})."
              }

              $created = $true
              break
            } catch {
              Write-Host "‚ö†Ô∏è Attempt ${attempt}: Failed to create/set user with password length $($finalPassword.Length). Reason: $_"
              if ($attempt -eq 1) {
                $finalPassword = Expand-PasswordToMinLen -pwd $finalPassword -minLen $minLen
                Write-Host "‚û°Ô∏è Expanding password to length $($finalPassword.Length) and retrying..."
              } elseif ($attempt -eq 2) {
                $finalPassword = 'VayVy2025!'
                Write-Host "‚û°Ô∏è Using fixed strong fallback password and retrying..."
              } else {
                Write-Error "‚ùå All attempts failed to create or update user 'Vayvy'."
                exit 1
              }
            }
            $attempt++
          }

          try { Add-LocalGroupMember -Group "Administrators" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=Vayvy"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPassword"

          Write-Host "‚úÖ Done. Final password used: $finalPassword"

      - name: üåê Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installer`"", "/quiet", "/norestart" -Wait
          Remove-Item $installer -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Tailscale installed."

      - name: üîó Connect to Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @(
              "$env:ProgramFiles\Tailscale\tailscale.exe",
              "$env:ProgramFiles(x86)\Tailscale\tailscale.exe"
            )
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }
          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname "gh-runner-${env:GITHUB_RUN_ID}" --accept-routes
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            Start-Sleep -Seconds 5
            $out = & $tsExe ip -4 2>$null
            if ($out) {
              $tsIP = ($out | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' } | Select-Object -First 1)
            }
            $retries++
          }
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: üì° Check Latency to Tailscale IP
        run: |
          Write-Host "üì° Checking latency..."
          $lat = Test-Connection -Count 4 -Quiet:$false -ComputerName $env:TAILSCALE_IP | Select-Object -First 1
          Write-Host "‚úÖ Ping to $env:TAILSCALE_IP successful."
          ping $env:TAILSCALE_IP -n 4

      - name: ‚ö° Optimize Windows for RDP
        run: |
          Write-Host "üîß Optimizing Windows performance..."
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          Stop-Service -Name WSearch -Force -ErrorAction SilentlyContinue
          Set-Service -Name WSearch -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
          Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Optimization done."

      - name: üìã RDP Summary
        run: |
          $md += "## üîë RDP Access`n`n"
          $md += "```text`n"
          $md += "Address : $env:TAILSCALE_IP`n"
          $md += "Username: $env:RDP_USER`n"
          $md += "Password: $env:RDP_PASS`n"
          $md += "```"
          Set-Content -Path $env:GITHUB_STEP_SUMMARY -Value $md -Encoding utf8
          Write-Host "$md"

      - name: üïí Keep Alive 12h + Auto Cleanup
        run: |
          Write-Host "üîÑ Keeping VM alive for up to 12 hours..."
          for ($m = 1; $m -le 720; $m++) {
            Write-Host "‚è≥ Minute ${m} / 720"
            Start-Sleep -Seconds 60
          }

          Write-Host "üßπ Time's up (12h). Running cleanup..."
          if (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue) {
            try { Remove-LocalUser -Name "Vayvy" -ErrorAction Stop; Write-Host "Removed user Vayvy" } catch {}
          }

          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @("$env:ProgramFiles\Tailscale\tailscale.exe","$env:ProgramFiles(x86)\Tailscale\tailscale.exe")
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }
          if ($tsExe) { try { & $tsExe logout; Write-Host "Tailscale logged out." } catch {} }

          try { Stop-Service -Name TermService -Force } catch {}
          Write-Host "‚úÖ Cleanup finished, VM will be destroyed by GitHub."
