name: üöÄ Vayvy RDP (Keep-Alive 12h, Optimized)

on:
  workflow_dispatch:

jobs:
  rdp-server:
    runs-on: windows-latest
    timeout-minutes: 720   # 12 jam max

    steps:
      - name: ‚öôÔ∏è Enable RDP
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          try { Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue } catch {}
          try { Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue } catch {}
          Write-Host "‚úÖ RDP enabled."

      - name: üë§ Create RDP User (fixed password with fallback)
        run: |
          $fixedWeak = 'vayv'
          $fixedFallback = 'VayVy2025!'
          $finalPass = $null

          try {
            $secure = ConvertTo-SecureString $fixedWeak -AsPlainText -Force
            if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "Vayvy" -Password $secure -AccountNeverExpires -ErrorAction Stop
            } else {
              Set-LocalUser -Name "Vayvy" -Password $secure -ErrorAction Stop
            }
            $finalPass = $fixedWeak
          } catch {
            $secure2 = ConvertTo-SecureString $fixedFallback -AsPlainText -Force
            if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "Vayvy" -Password $secure2 -AccountNeverExpires -ErrorAction Stop
            } else {
              Set-LocalUser -Name "Vayvy" -Password $secure2 -ErrorAction Stop
            }
            $finalPass = $fixedFallback
          }

          try { Add-LocalGroupMember -Group "Administrators" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=Vayvy"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPass"

          Write-Host "‚úÖ User created/updated. Password in use: $finalPass"

      - name: üåê Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installer`"", "/quiet", "/norestart" -Wait
          Remove-Item $installer -Force -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Tailscale installed."

      - name: üîó Connect to Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @(
              "$env:ProgramFiles\Tailscale\tailscale.exe",
              "$env:ProgramFiles(x86)\Tailscale\tailscale.exe"
            )
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }
          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname "gh-runner-$env:GITHUB_RUN_ID" --accept-routes
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            Start-Sleep -Seconds 5
            $out = & $tsExe ip -4 2>$null
            if ($out) {
              $tsIP = ($out | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' } | Select-Object -First 1)
            }
            $retries++
          }
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: üì° Check Latency to Tailscale IP
        run: |
          Write-Host "üì° Checking latency..."
          $lat = Test-Connection -Count 4 -Quiet:$false -ComputerName $env:TAILSCALE_IP | Select-Object -First 1
          Write-Host "‚úÖ Ping to $env:TAILSCALE_IP successful."
          ping $env:TAILSCALE_IP -n 4

      - name: ‚ö° Optimize Windows for RDP
        run: |
          Write-Host "üîß Optimizing Windows performance..."
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          Stop-Service -Name WSearch -Force -ErrorAction SilentlyContinue
          Set-Service -Name WSearch -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue
          Set-Service -Name SysMain -StartupType Disabled -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Optimization done."

      - name: üìã RDP Summary
        run: |
          $md = "## üîë RDP Access`n`n"
          $md += "```text`n"
          $md += "Address : $env:TAILSCALE_IP`n"
          $md += "Username: $env:RDP_USER`n"
          $md += "Password: $env:RDP_PASS`n"
          $md += "```"
          Set-Content -Path $env:GITHUB_STEP_SUMMARY -Value $md -Encoding utf8
          Write-Host "$md"

      - name: üïí Keep Alive 12h + Auto Cleanup
        run: |
          Write-Host "üîÑ Keeping VM alive for up to 12 hours..."
          for ($m = 1; $m -le 720; $m++) {
            Write-Host "‚è≥ Minute $m / 720"
            Start-Sleep -Seconds 60
          }

          Write-Host "üßπ Time's up (12h). Running cleanup..."
          if (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue) {
            try { Remove-LocalUser -Name "Vayvy" -ErrorAction Stop; Write-Host "Removed user Vayvy" } catch {}
          }

          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @("$env:ProgramFiles\Tailscale\tailscale.exe","$env:ProgramFiles(x86)\Tailscale\tailscale.exe")
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }
          if ($tsExe) { try { & $tsExe logout; Write-Host "Tailscale logged out." } catch {} }

          try { Stop-Service -Name TermService -Force } catch {}
          Write-Host "‚úÖ Cleanup finished, VM will be destroyed by GitHub."
